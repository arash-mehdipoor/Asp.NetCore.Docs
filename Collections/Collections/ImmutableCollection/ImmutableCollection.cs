using System.Collections.Immutable;

namespace Collections.ImmutableCollection
{
    #region Description
    /// <summary>
    /// ما اغلب دیتا تایپهایی که داریم میوتیبل هستن یعنی قابل تغییر هستن  و این تغییر پذیری ممکنه مارو دچار مشکل بکنه مخصوصا تو محیط های چند نخی
    /// مثلا تغییری بخوایم ایجاد بکنیم باید لاک بکنیم که یکی از یجای دیگه ای تغییری اعمال نکنه،بعدشم لاک رو برداریم تا بقیه بتونن کار بکنن
    /// اما اگر اشیای ما قابل تغییر نباشن دیگه این مشکله برامون پیش نمیاد و خیلی راحت میتونیم باهاشون کار کنیم اشیا و کلاسهایی که مقدارشون قابل تغییر نیست بهشون میگیم ایمیوتیبل
    /// و تو حوزه کالکشن ها  ما یک دسته خاصی از کالکشن هارو داریم که ما بهشون میگیم ایمیو تیبل کالکشن  یعنی کالکشن هایی که بعد از 
    /// مقدار دهی شدن دیگه قابل تغییر نیستن،،شاید بنظرتون بیاد شبیه رید اونلیه اما متفاوته، ما توی رید اونلی گفتیم که اگر مقداری که برگشت میدم رید اونلی باشه کسی نمیتونه تغییرش بده اما اگر کسی دسترسی پیدا بکنه به اینستنس
    /// اصلی لیست من اون لیست قابل تغییر کردنه اما در مورد ایمیو تیبل ها اینطور نیست و دیگه کلا قابل تغییر نیست،
    /// شاید با خودتون بگید به چه دردی میخوره لیستی که قابل تغییر نیست،ببینید تغییر میکنه ولی نه مقدار اصلیش ،بلکه هر بار که تغییرش میدید یک اینتنس جدید ساخته میشه،
    /// مثلا یک آبجکتی شیر هست بین ده نفر اگر یک نفر بیاد مقدارش رو تغییر بده به اون یه نفر یک اینستنس جدید داده میشه ولی بقیه که یک اینتنس دیگه در اختیارشون بوده این تغییری نمیکنه
    /// اتفاقی نمیوفته که عملکردشون بخواد دچار مشکل بشه
    /// </summary> 
    #endregion
    #region ImmutableCollection
    public class ImmutableCollection
    {
        public void Test()
        {
            ImmutableList<string> list = ImmutableList.Create<string>();

            Console.WriteLine(list.Count); // 0

            // ما اد زدیم ولی خود این لیست رو تغییر نمیده بلکه یک لیست جدید ایجاد میکنه و تو نتیجه برای من برمیگردونه
            var result = list.Add("Hi");

            Console.WriteLine(list.Count); // 0
            Console.WriteLine(result.Count); // 1

            // متونید لیستتون رو بصورت عادی ایجاد بکنید و از جایی که نیاز دارید تبدیلش بکنید به ایمیتیبل لیست
            List<string> list2 = new List<string>();
            list2.Add("list2");

            list2.ToImmutableList();

            Console.ReadLine();
        }
    } 
    #endregion
}
