namespace Collections.Lists
{
    #region List
    /// <summary>
    /// لیست ها :  
    /// </summary>
    public class ListSample
    {
        #region Description
        /// <summary>
        /// در اینجا لیست ما فقط تعریف شده و هنوز هیچ ظرفیتی از حافظه رو اشغال نکرده، از کجا معلوم میشه که چقدر ظرفیت داره
        /// مثلا اگر من استرینگ تعریف کردم چه مقدار متغیر استرینگ میتونم توش ذخیره سازی کنم؟ پشت صحنه میره یک آرایه تعریف میکنه برای ما
        /// و عناصری که تعریف میکنیم توی آرایه قرار میده آرایه رو  چندتایی تعریف میکنه؟  این چندتایی بودن آرایه رو با کپسیتی به ما اعلام میکنه
        /// که آرایه که الان ساخته توش چندتا عنصر میتونه نگهداری کنه خب در ابتداظرفیت صفر هستش اما کی ظرفیت براش در نظر میگیره ؟
        /// وقتی که من اولین عنصرم رو به صفحه اضافه میکنم  به تعداد 4 تا ظرفیت برای ما فضا ایجاد میکنه،حالا چطور بدونیم چند تا از خونه های این آرایه پره با کانت
        /// این رو میگیریم
        /// </summary>

        #endregion

        List<string> list = new List<string>();

        /// <summary>
        /// در ابتدا که مقداری به لیست اضافه نکردیم مقدار کپسیتی 0 هستش یعنی فضایی توی حافظه اشغال نکرده
        /// </summary>
        public void PrintCapacity()
        {
            Console.WriteLine($"Capacity : {list.Capacity}");
        }

        public void PrintCount()
        {
            Console.WriteLine($"Count : {list.Count}");
        }
        /// <summary>
        /// به این نکته توجه کنید که وقتی فضای اشغال شده از مقدار مثلا 4 بیشتر میشود پشت صحنه یک کپی از آرایه ی چهار تایی گرفته میشود و یک آرایه جدید ایجاد میشود و این آرایه چهار تایی داخلش ریخته میشه
        /// و پنجمین عنصر هم بهش اضافه میشه ،پس دقت بکنید این کپی کردنه سربار داره اگر لیستی دارید که میدونید مقدارش چقدره همون اول براش کپسیتی تعیین بکنید تا از این سربار جلوگیری کرده باشد
        /// </summary>
        /// <param name="input"></param>
        public void AddMember(string input)
        {
            list.Add(input);
            //list.AddRange(new string[] { "1","2","3" });
        }

        /// <summary>
        /// این قابلیت در دات نت 6 اضافه شده و این امکان رو به ما میده که تعیین بکینیم که تا یگ جایی لیستمون پر شد یهو 20 تا کپسیتی بهش اضافه بکنیم 
        /// </summary>
        public void Ensure()
        {
            list.EnsureCapacity(20);
        }
        /// <summary>
        /// ببنید تعدا فضایی که آرایمون اشغال میکنه اول 4 تاس بعدش 8 و در کل دوبرابر میشه،و مثلا میرسه به 256،فرض کنید که شما 257 آیتم دارین ،اما خونه هایی که از حافظه اشغال میشه 512 عدد میشه
        /// برای اینکه این خونه های اضافه رو به حافظه برگردونید از تریم اکسس میتونید استفاده کنید
        ///ببینید برگردوندن اون مقدار از حافظه یعنی تغییر دادن  اندازه اون آرایه دیگه؟ خب این خودش برامون سربار داره اینجا دات نت یک هوشمندی به خرج میده میاد چک میکنه میبینه اگر 90 درصد یا بیشتر از کپسیتی آرایت پر بود
        ///اصلا ارزش این جابجاییی وجود نداره،اگر کمتر از 90 درصد بود  میاد عمل این تریم رو انجام میده
        /// </summary>
        public void Trim()
        {
            list.TrimExcess();
        }

        public void Remove()
        {
            list.Remove("1");
            list.RemoveAll(x => x.StartsWith("1")); // یک دلیگیت میگیره و میاد همه ی اونهایی که این شرط رو داشته باشند حذف میکنه از توی لیست
            list.RemoveAt(0); // یک ایندکس میگیره و عنصر اون ایندکس رو پاک میکنه
            list.RemoveRange(0, 1); // یک ایندکس میگیره و میگه چندتا رو پاک کنم
        }

        /// <summary>
        /// میتونم لیستم رو فقط خواندنی کنم که دیگه قابل تغییر هم نباشه
        /// </summary>
        /// <returns></returns>
        public IReadOnlyList<string> GetReadOnly()
        {
            return list.AsReadOnly();
        }

    } 
    #endregion
}
